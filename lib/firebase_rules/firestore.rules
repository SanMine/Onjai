rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Validate user profile fields on create/update
      allow create, update: if request.auth != null && request.auth.uid == userId
        && _validateUserProfile(resource.data);
    }
    
    // Users can read/write their own favorites
    match /users/{userId}/favoriteFoods/{foodId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Validate favorite document structure
      allow create, update: if request.auth != null && request.auth.uid == userId
        && _validateFavoriteFood(resource.data);
    }
    
    // Public content - anyone can read, no one can write (admin only via console)
    match /config/{document} {
      allow read: if request.auth != null;
      allow write: if false; // Admin only via console
    }
    
    match /content/{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // Admin only via console
    }
    
    match /foods/{document} {
      allow read: if request.auth != null;
      allow write: if false; // Admin only via console
    }
    
    match /therapy/{document} {
      allow read: if request.auth != null;
      allow write: if false; // Admin only via console
    }
    
    match /medicines/{document} {
      allow read: if request.auth != null;
      allow write: if false; // Admin only via console
    }
    
    // Helper functions for validation
    function _validateUserProfile(data) {
      return data.keys().hasAll(['displayName', 'email', 'dob', 'dayOfWeek', 'element', 'photoUrl'])
        && data.displayName is string
        && data.displayName.size() >= 1
        && data.displayName.size() <= 100
        && data.email is string
        && data.email == request.auth.token.email
        && data.dob is timestamp
        && data.dob < request.time
        && data.dayOfWeek is string
        && data.dayOfWeek in ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
        && data.element is string
        && data.element in ['Fire', 'Water', 'Wind', 'Earth']
        && data.photoUrl is string
        && (data.photoUrl == '' || data.photoUrl.matches('^https://.*'));
    }
    
    function _validateFavoriteFood(data) {
      return data.keys().hasAll(['createdAt'])
        && data.createdAt is timestamp
        && data.createdAt <= request.time;
    }
  }
}
